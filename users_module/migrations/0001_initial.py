# Generated by Django 3.0.7 on 2020-06-29 19:33

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import users_module.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('patient_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('Rather not say', 'Rather not say')], max_length=100, null=True)),
                ('site', models.CharField(blank=True, choices=[('Roha', 'Roha'), ('Mahad', 'Mahad'), ('Pune', 'Pune')], max_length=100)),
                ('category', models.CharField(blank=True, choices=[('Employee', 'Employee'), ('Relative', 'Relative')], max_length=20)),
                ('relative_patient', models.CharField(blank=True, max_length=100)),
                ('employee_id', models.CharField(blank=True, max_length=100)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('blood_pressure', models.BooleanField(default=False, null=True)),
                ('diabetes', models.BooleanField(default=False, null=True)),
                ('obesity', models.BooleanField(default=False, null=True)),
                ('heart_issues', models.BooleanField(default=False, null=True)),
                ('on_immuno_suppressants', models.BooleanField(default=False, null=True)),
                ('kidney_liver_lung_disease', models.BooleanField(default=False, null=True)),
                ('contact_with_positive', models.BooleanField(default=False, null=True)),
                ('contact_date', models.DateField(blank=True, null=True)),
                ('quarantine', models.BooleanField(default=False, null=True)),
                ('test_done', models.BooleanField(default=False)),
                ('report_received', models.BooleanField(default=False)),
                ('covid_test_outcome', models.BooleanField(default=False)),
                ('hospitalized', models.BooleanField(default=False)),
                ('name_of_hospital', models.CharField(blank=True, max_length=1000)),
                ('close_monitoring', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Daily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('dry_cough', models.BooleanField(default=False)),
                ('dry_cough_frequency', models.IntegerField(blank=True, null=True)),
                ('sore_throat', models.BooleanField(default=False)),
                ('body_ache', models.BooleanField(default=False)),
                ('body_ache_intensity', models.IntegerField(blank=True, null=True)),
                ('head_ache', models.BooleanField(default=False)),
                ('head_ache_intensity', models.IntegerField(blank=True, null=True)),
                ('weakness', models.BooleanField(default=False)),
                ('anosmia', models.BooleanField(default=False)),
                ('ageusia', models.BooleanField(default=False)),
                ('diarrhoea', models.BooleanField(default=False)),
                ('diarrhoea_frequency', models.IntegerField(blank=True, null=True)),
                ('temperature_morning', models.FloatField(blank=True, null=True)),
                ('temperature_evening', models.FloatField(blank=True, null=True)),
                ('spo2_morning', models.IntegerField(blank=True, null=True)),
                ('spo2_evening', models.IntegerField(blank=True, null=True)),
                ('appetite_level', models.IntegerField(blank=True, null=True)),
                ('abnormal_medical_reports', models.BooleanField(default=False)),
                ('report', models.URLField(blank=True, null=True)),
                ('difficulty_breathing', models.BooleanField(default=False)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_records', to='users_module.Patient')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', users_module.models.UserManager()),
            ],
        ),
    ]
